
function LBf90_Set_Mid_Migrate_Fn0s(lb,fn_ptr)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn0s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(dummy, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  integer(Zoltan_INT), intent(in)  :: dummy(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn0s = Zfw_Set_Fn0s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr)
end function LBf90_Set_Mid_Migrate_Fn0s


function LBf90_Set_Mid_Migrate_Fn1s(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn1s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  integer(Zoltan_INT) , intent(in) :: data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
integer(Zoltan_INT) , intent(in) :: data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn1s = Zfw_Set_Fn1s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_Fn1s


function LBf90_Set_Mid_Migrate_Fn2s(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn2s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  real(Zoltan_FLOAT) , intent(in) :: data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
real(Zoltan_FLOAT) , intent(in) :: data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn2s = Zfw_Set_Fn2s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_Fn2s


function LBf90_Set_Mid_Migrate_Fn3s(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn3s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  real(Zoltan_DOUBLE) , intent(in) :: data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
real(Zoltan_DOUBLE) , intent(in) :: data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn3s = Zfw_Set_Fn3s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_Fn3s


function LBf90_Set_Mid_Migrate_Fn8s(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn8s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  use zoltan_user_data
  type(LB_User_Data_1) , intent(in) :: data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_1) , intent(in) :: data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn8s = Zfw_Set_Fn8s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_Fn8s


function LBf90_Set_Mid_Migrate_Fn9s(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_Fn9s
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  use zoltan_user_data
  type(LB_User_Data_2) , intent(in) :: data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_2) , intent(in) :: data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_Fn9s = Zfw_Set_Fn9s(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_Fn9s


function LBf90_Set_Mid_Migrate_FnAs(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_FnAs
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  use zoltan_user_data
  type(LB_User_Data_3) , intent(in) :: data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_3) , intent(in) :: data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_FnAs = Zfw_Set_FnAs(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_FnAs


function LBf90_Set_Mid_Migrate_FnBs(lb,fn_ptr,data)
integer(Zoltan_INT) :: LBf90_Set_Mid_Migrate_FnBs
type(LB_Struct) , intent(in) :: lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  use zoltan_user_data
  type(LB_User_Data_4) , intent(in) :: data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_4) , intent(in) :: data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
LBf90_Set_Mid_Migrate_FnBs = Zfw_Set_FnBs(lb_addr,nbytes,ZOLTAN_MID_MIGRATE_FN_TYPE%choice,fn_ptr,data)
end function LBf90_Set_Mid_Migrate_FnBs


